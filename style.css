* {margin: 0; padding: 0;}

html, body {
  height: 100%;
}

body {
  background-color: #999;
  box-shadow: inset 20px 20px 20px #222;
}

.frame {
  --frame-thickness: 50px;
  --grid-height: 490px; /* remove defining this constant both here and in JS */
  --grid-width: calc(5 / 3 * var(--grid-height));
  position: absolute;
  width: calc(var(--grid-width) + 2 * var(--frame-thickness));
  height: calc(var(--grid-height) + 2 * var(--frame-thickness));
  top: 100px;
  left: 150px;
  background-color: var(--frame-color);
  border-radius: 20px;
  box-shadow: 10px 10px 10px 5px #222, 
    inset 0 0 5px #222,
    inset 0 0 20px #ffffff7f,
    inset 2px 2px 10px var(--frame-color), 
    inset 5px 5px 5px white;
}

.grid {
  position: absolute;
  overflow: hidden;
  border-radius: 20px;
  top: var(--frame-thickness);
  left: var(--frame-thickness);
  box-shadow: 2px 2px 10px var(--frame-color),
    3px 3px 5px white,
    0 0 20px #ffffff7f;
}

.grid::before {
  content: "";

  box-shadow: inset 2px 2px 2px #222;
  z-index: 1;
  width: inherit;
  height: inherit;
  border-radius: 20px;

  position: absolute;
  top: 0;
  left: 0;

  pointer-events: none;
}

:root {
  --default-hexagon-margin-side-length: 50px;
  --default-cell-background-color: black;
  --default-hexagon-margin: 1px;
  --default-square-width: 50px;
  --default-square-height: 50px;
  --default-square-border: 1px;
  --frame-color: #3256bb;
}

.square {
  --cell-background-color: var(--default-cell-background-color);
  background-color: var(--cell-background-color);
  width: calc(var(--default-square-width) - 2*var(--default-square-border));
  height: calc(var(--default-square-height) - 2*var(--default-square-border));
  border: var(--default-square-border) solid transparent;
  background-clip: padding-box;
  position: absolute;
}

.hexagon {  /* the central rectangle */
  --hexagon-margin-side-length: var(--default-hexagon-margin-side-length);
  --cell-background-color: var(--default-cell-background-color);
  --hexagon-margin: var(--default-hexagon-margin); /* border won't behave correctly on :before and :after elements, so instead, shrink the hexagon slightly */
  --hexagon-height: calc(var(--root-3) * var(--hexagon-margin-side-length) - 2*var(--hexagon-margin));
  --hexagon-width: calc(2/var(--root-3) * var(--hexagon-height));
  --hexagon-side-length: calc(var(--hexagon-width) / 2);
  --root-3: 1.73205080757;
  width: var(--hexagon-side-length); /* this is just the width of the central rectangle */
  height: var(--hexagon-height);
  background-color: var(--cell-background-color);
  position:absolute;
}

.hexagon:before { /* the left triangle */
  content: "";
  position: absolute;
  width: 0;
  height: 0;
  left: calc(-1 * var(--hexagon-side-length) / 2);
  border-right: calc(var(--hexagon-side-length) / 2) solid var(--cell-background-color);
  border-bottom: calc(var(--hexagon-height) / 2) solid transparent;
  border-top: calc(var(--hexagon-height) / 2) solid transparent;
}

.hexagon:after { /* the right triangle */
  content: "";
  position: absolute;
  width: 0;
  height: 0;
  right: calc(-1 * var(--hexagon-side-length) / 2);
  border-left: calc(var(--hexagon-side-length) / 2) solid var(--cell-background-color);
  border-bottom: calc(var(--hexagon-height) / 2) solid transparent;
  border-top: calc(var(--hexagon-height) / 2) solid transparent;
}

.clear-slider-frame {
  position: absolute;
  --slider-overflow: 10px;
  height: 40px;
  bottom: 0;
  left: calc(var(--frame-thickness) - var(--slider-overflow));
  width: calc(2*var(--slider-overflow) + var(--grid-width));
  background-color: black;
}

.clear-slider-track {
  position: absolute;
  width: inherit;
  height: 10px;
  bottom: 15px;
  background-color: white;
}

.clear-slider-handle {
  position: absolute;
  left: 0;
  height: inherit;
  width: 10px;
  background-color: white;
}

.buttons {
  position: absolute;
  top: 100px;
  left: 30px;
}

button {
  margin: 5px;
  height: 50px;
  width: 100px;
  box-shadow: 2px 2px 2px #222;
}